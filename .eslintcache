[{"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\App.tsx":"1","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Main.tsx":"2","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmPicker.tsx":"3","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\enums.ts":"4","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmEncoder.tsx":"5","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Caeser.tsx":"6","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Playfair.tsx":"7","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Vigenere.tsx":"8","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\helper.ts":"9","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmDecoder.tsx":"10","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Transposition.tsx":"11","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\index.tsx":"12","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Blowfish.tsx":"13","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\blowFishConstants.ts":"14","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\blowfishDiagram.js":"15","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\reportWebVitals.ts":"16","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AES.tsx":"17","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\RSA.tsx":"18","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\DiffieHellmanChat.tsx":"19","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\api.ts":"20"},{"size":712,"mtime":1614172029324,"results":"21","hashOfConfig":"22"},{"size":1197,"mtime":1615062128213,"results":"23","hashOfConfig":"22"},{"size":1214,"mtime":1611978794131,"results":"24","hashOfConfig":"22"},{"size":234,"mtime":1615061906590,"results":"25","hashOfConfig":"22"},{"size":1124,"mtime":1615061995414,"results":"26","hashOfConfig":"22"},{"size":2865,"mtime":1612110840391,"results":"27","hashOfConfig":"22"},{"size":2531,"mtime":1612201496488,"results":"28","hashOfConfig":"22"},{"size":2531,"mtime":1612200475926,"results":"29","hashOfConfig":"22"},{"size":12415,"mtime":1615061836949,"results":"30","hashOfConfig":"22"},{"size":1022,"mtime":1614174556324,"results":"31","hashOfConfig":"22"},{"size":3273,"mtime":1612204928381,"results":"32","hashOfConfig":"22"},{"size":500,"mtime":1610531780434,"results":"33","hashOfConfig":"22"},{"size":6968,"mtime":1613072855891,"results":"34","hashOfConfig":"22"},{"size":17841,"mtime":1612992732691,"results":"35","hashOfConfig":"22"},{"size":343,"mtime":1613000716996,"results":"36","hashOfConfig":"22"},{"size":425,"mtime":1610531780434,"results":"37","hashOfConfig":"22"},{"size":2342,"mtime":1614172507990,"results":"38","hashOfConfig":"22"},{"size":5495,"mtime":1614178738097,"results":"39","hashOfConfig":"22"},{"size":5873,"mtime":1615070623955,"results":"40","hashOfConfig":"22"},{"size":447,"mtime":1615067390579,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1av2frm",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\App.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Main.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmPicker.tsx",[],["93","94"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\enums.ts",[],["95","96"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmEncoder.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Caeser.tsx",[],["97","98"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Playfair.tsx",[],["99","100"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Vigenere.tsx",[],["101","102"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\helper.ts",["103","104","105"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmDecoder.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Transposition.tsx",[],["106","107"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\index.tsx",[],["108","109"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Blowfish.tsx",["110","111","112","113","114"],"import React, { useState, useRef, CSSProperties } from \"react\";\r\nimport { Typography, Input, Button } from \"antd\";\r\nimport * as d3 from \"d3\";\r\nimport { blowfishEncode, blowfishDecode } from \"../utils/helper\";\r\nimport { P } from \"../utils/blowFishConstants\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  marginBottom: \"1rem\",\r\n};\r\n\r\nconst possibleCharacters = \"0123456789abcdef\";\r\n\r\nconst checkForCharacters = (text: string): boolean => {\r\n  for (let i = 0; i < text.length; ++i) {\r\n    if (possibleCharacters.indexOf(text.charAt(i)) === -1) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst drawText = (\r\n  mainGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n  text: string,\r\n  x: number,\r\n  y: number\r\n) => {\r\n  mainGroup\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"x\", x)\r\n    .attr(\"y\", y)\r\n    .attr(\"font-size\", \"1rem\")\r\n    .text(text);\r\n};\r\n\r\nconst drawCircle = (\r\n  mainGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n  x: number,\r\n  y: number\r\n) => {\r\n  mainGroup\r\n    .append(\"circle\")\r\n    .attr(\"cx\", x)\r\n    .attr(\"cy\", y - 3)\r\n    .attr(\"r\", 15)\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"stroke\", \"steelblue\")\r\n    .attr(\"stroke-width\", \"1px\");\r\n};\r\n\r\nconst drawDiagram = (svg: SVGSVGElement) => {\r\n  const container = d3.select(svg);\r\n  container.selectAll(\"g\").remove();\r\n  const height = parseInt(container.attr(\"height\"));\r\n  const width = parseInt(container.attr(\"width\"));\r\n  const verticalSpacing = 60;\r\n  let startY = 20;\r\n\r\n  const mainGroup = container.append(\"g\");\r\n  const plainText = mainGroup\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"x\", width / 2)\r\n    .attr(\"y\", startY)\r\n    .attr(\"font-size\", \"1rem\")\r\n    .text(\"Plain Text Kekulus\");\r\n  console.log(plainText.node()?.getComputedTextLength());\r\n\r\n  startY += verticalSpacing;\r\n\r\n  const left = mainGroup\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"x\", width / 4)\r\n    .attr(\"y\", startY)\r\n    .attr(\"font-size\", \"1rem\")\r\n    .text(\"left part\");\r\n\r\n  const right = mainGroup\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"x\", width - width / 4)\r\n    .attr(\"y\", startY)\r\n    .attr(\"font-size\", \"1rem\")\r\n    .text(\"right part\");\r\n\r\n  startY += verticalSpacing;\r\n\r\n  const colWidth = width / 7;\r\n\r\n  const xLeft = colWidth + colWidth / 2;\r\n  const xCenter = 3 * colWidth + colWidth / 2;\r\n  const xRight = 5 * colWidth + colWidth / 2;\r\n\r\n  const circleRadius = 15;\r\n\r\n  for (let i = 0; i < 16; ++i) {\r\n    let yBegin = startY - 10;\r\n    drawText(mainGroup, \"L\", xLeft, startY);\r\n    drawCircle(mainGroup, xLeft, startY);\r\n\r\n    drawText(mainGroup, \"Pi\", xCenter, startY);\r\n    drawCircle(mainGroup, xCenter, startY);\r\n\r\n    drawText(mainGroup, \"R\", xRight, startY);\r\n    drawCircle(mainGroup, xRight, startY);\r\n\r\n    startY += verticalSpacing;\r\n\r\n    drawText(mainGroup, \"X\", xLeft, startY);\r\n    drawCircle(mainGroup, xLeft, startY);\r\n\r\n    startY += verticalSpacing;\r\n\r\n    drawText(mainGroup, \"L\", xLeft, startY);\r\n    drawCircle(mainGroup, xLeft, startY);\r\n\r\n    drawText(mainGroup, \"F\", xCenter, startY);\r\n    drawCircle(mainGroup, xCenter, startY);\r\n\r\n    drawText(mainGroup, \"X\", xRight, startY);\r\n    drawCircle(mainGroup, xRight, startY);\r\n\r\n    startY += verticalSpacing;\r\n\r\n    drawText(mainGroup, \"R\", xRight, startY);\r\n    drawCircle(mainGroup, xRight, startY);\r\n\r\n    startY += verticalSpacing;\r\n\r\n    drawText(mainGroup, \"L\", xLeft, startY);\r\n    drawCircle(mainGroup, xLeft, startY);\r\n\r\n    drawText(mainGroup, \"R\", xRight, startY);\r\n    drawCircle(mainGroup, xRight, startY);\r\n\r\n    let yEnd = startY;\r\n\r\n    mainGroup\r\n      .append(\"rect\")\r\n      .attr(\"x\", xLeft - 30)\r\n      .attr(\"y\", yBegin - 15)\r\n      .attr(\"width\", xRight - xLeft + 60)\r\n      .attr(\"height\", yEnd - yBegin + 30)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"steelblue\")\r\n      .attr(\"stroke-width\", \"1px\");\r\n\r\n    startY += verticalSpacing;\r\n  }\r\n};\r\n\r\nexport const BlowfishEncode: React.FC = () => {\r\n  const [plainText, setPlainText] = useState<string>(\"\");\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [encodedText, setEncodedText] = useState<string>(\"\");\r\n  const svg = useRef<SVGSVGElement>(null);\r\n\r\n  const handleChangePlainText = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let value = event.target.value.toLowerCase();\r\n    if (value.length > 16 || !checkForCharacters(value)) {\r\n      return;\r\n    }\r\n    setPlainText(value);\r\n  };\r\n\r\n  const encode = () => {\r\n    if (plainText.length === 16 && key.length && key.length % 8 === 0) {\r\n      setEncodedText(blowfishEncode(plainText, key));\r\n      if (svg && svg.current) {\r\n        drawDiagram(svg.current);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text type=\"success\">Encode</Text>\r\n      <Input\r\n        placeholder=\"Input your text\"\r\n        value={plainText}\r\n        onChange={handleChangePlainText}\r\n        style={defaultStyle}\r\n      />\r\n      <Input\r\n        placeholder=\"Input your key\"\r\n        value={key ? key : \"\"}\r\n        onChange={(event) => setKey(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Button type=\"primary\" style={defaultStyle} onClick={() => encode()}>\r\n        Encode\r\n      </Button>\r\n      <div>\r\n        <Text>Encoded Text</Text>\r\n        <Input\r\n          placeholder=\"Your encoded text\"\r\n          value={encodedText}\r\n          contentEditable={false}\r\n        />\r\n      </div>\r\n      <svg ref={svg} height=\"3400\" width=\"400\"></svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const BlowfishDecode: React.FC = () => {\r\n  const [encodedText, setEncodedText] = useState<string>(\"\");\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [decodedText, setDecodedText] = useState<string>(\"\");\r\n\r\n  const handleChangeEncodedText = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let value = event.target.value.toLowerCase();\r\n    if (value.length > 16 || !checkForCharacters(value)) {\r\n      return;\r\n    }\r\n    setEncodedText(value);\r\n  };\r\n\r\n  const decode = () => {\r\n    if (encodedText.length === 16 && key.length && key.length % 8 === 0) {\r\n      setDecodedText(blowfishDecode(encodedText, key));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text type=\"success\">Decode</Text>\r\n      <Input\r\n        placeholder=\"Input your encoded text\"\r\n        value={encodedText}\r\n        onChange={handleChangeEncodedText}\r\n        style={defaultStyle}\r\n      />\r\n      <Input\r\n        placeholder=\"Input your key\"\r\n        value={key ? key : \"\"}\r\n        onChange={(event) => setKey(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Button type=\"primary\" style={defaultStyle} onClick={() => decode()}>\r\n        Decode\r\n      </Button>\r\n      <div>\r\n        <Text>Decoded Text</Text>\r\n        <Input\r\n          placeholder=\"Your decoded text\"\r\n          value={decodedText}\r\n          contentEditable={false}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n",["115","116"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\blowFishConstants.ts",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\blowfishDiagram.js",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\reportWebVitals.ts",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AES.tsx",["117","118"],"import React, { useState, CSSProperties } from \"react\";\r\nimport { Typography, Input, Button } from \"antd\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  marginBottom: \"1rem\",\r\n};\r\n\r\nexport const AESEncode: React.FC = () => {\r\n  const [plainText, setPlainText] = useState<string>(\"\");\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [encodedText, setEncodedText] = useState<string>(\"\");\r\n\r\n  const encode = () => {\r\n    if (plainText.length && key.length) {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text type=\"success\">Encode</Text>\r\n      <Input\r\n        placeholder=\"Input your text\"\r\n        value={plainText}\r\n        onChange={(event) => setPlainText(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Input\r\n        placeholder=\"Input your key\"\r\n        value={key ? key : \"\"}\r\n        onChange={(event) => setKey(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Button type=\"primary\" style={defaultStyle} onClick={() => encode()}>\r\n        Encode\r\n      </Button>\r\n      <div>\r\n        <Text>Encoded Text</Text>\r\n        <Input\r\n          placeholder=\"Your encoded text\"\r\n          value={encodedText}\r\n          contentEditable={false}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const AESDecode: React.FC = () => {\r\n  const [encodedText, setEncodedText] = useState<string>(\"\");\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [decodedText, setDecodedText] = useState<string>(\"\");\r\n\r\n  const decode = () => {\r\n    if (encodedText.length && key.length) {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text type=\"success\">Decode</Text>\r\n      <Input\r\n        placeholder=\"Input your encoded text\"\r\n        value={encodedText}\r\n        onChange={(event) => setEncodedText(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Input\r\n        placeholder=\"Input your key\"\r\n        value={key ? key : \"\"}\r\n        onChange={(event) => setKey(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Button type=\"primary\" style={defaultStyle} onClick={() => decode()}>\r\n        Decode\r\n      </Button>\r\n      <div>\r\n        <Text>Decoded Text</Text>\r\n        <Input\r\n          placeholder=\"Your decoded text\"\r\n          value={decodedText}\r\n          contentEditable={false}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n",["119","120"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\RSA.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\DiffieHellmanChat.tsx",["121","122","123"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\api.ts",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"124","replacedBy":"128"},{"ruleId":"126","replacedBy":"129"},{"ruleId":"124","replacedBy":"130"},{"ruleId":"126","replacedBy":"131"},{"ruleId":"124","replacedBy":"132"},{"ruleId":"126","replacedBy":"133"},{"ruleId":"124","replacedBy":"134"},{"ruleId":"126","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":1,"column":10,"nodeType":"138","messageId":"139","endLine":1,"endColumn":16},{"ruleId":"140","severity":1,"message":"141","line":367,"column":3,"nodeType":"142","messageId":"143","endLine":367,"endColumn":13},{"ruleId":"136","severity":1,"message":"144","line":383,"column":7,"nodeType":"138","messageId":"139","endLine":383,"endColumn":11},{"ruleId":"124","replacedBy":"145"},{"ruleId":"126","replacedBy":"146"},{"ruleId":"124","replacedBy":"147"},{"ruleId":"126","replacedBy":"148"},{"ruleId":"136","severity":1,"message":"149","line":5,"column":10,"nodeType":"138","messageId":"139","endLine":5,"endColumn":11},{"ruleId":"136","severity":1,"message":"150","line":57,"column":9,"nodeType":"138","messageId":"139","endLine":57,"endColumn":15},{"ruleId":"136","severity":1,"message":"151","line":74,"column":9,"nodeType":"138","messageId":"139","endLine":74,"endColumn":13},{"ruleId":"136","severity":1,"message":"152","line":82,"column":9,"nodeType":"138","messageId":"139","endLine":82,"endColumn":14},{"ruleId":"136","severity":1,"message":"153","line":98,"column":9,"nodeType":"138","messageId":"139","endLine":98,"endColumn":21},{"ruleId":"124","replacedBy":"154"},{"ruleId":"126","replacedBy":"155"},{"ruleId":"136","severity":1,"message":"156","line":13,"column":23,"nodeType":"138","messageId":"139","endLine":13,"endColumn":37},{"ruleId":"136","severity":1,"message":"157","line":53,"column":23,"nodeType":"138","messageId":"139","endLine":53,"endColumn":37},{"ruleId":"124","replacedBy":"158"},{"ruleId":"126","replacedBy":"159"},{"ruleId":"136","severity":1,"message":"160","line":6,"column":10,"nodeType":"138","messageId":"139","endLine":6,"endColumn":22},{"ruleId":"161","severity":1,"message":"162","line":74,"column":6,"nodeType":"163","endLine":74,"endColumn":19,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"165","line":98,"column":6,"nodeType":"163","endLine":98,"endColumn":32,"suggestions":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],["167"],["168"],["167"],["168"],["167"],["168"],["167"],["168"],"@typescript-eslint/no-unused-vars","'Result' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'text' is assigned a value but never used.",["167"],["168"],["167"],["168"],"'P' is defined but never used.","'height' is assigned a value but never used.","'left' is assigned a value but never used.","'right' is assigned a value but never used.","'circleRadius' is assigned a value but never used.",["167"],["168"],"'setEncodedText' is assigned a value but never used.","'setDecodedText' is assigned a value but never used.",["167"],["168"],"'CaeserDecode' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sharedSecretKey'. Either include it or remove the dependency array.","ArrayExpression",["169"],"React Hook useEffect has a missing dependency: 'lastMessage'. Either include it or remove the dependency array.",["170"],"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},"Update the dependencies array to be: [lastMessage, sharedSecretKey]",{"range":"175","text":"176"},"Update the dependencies array to be: [sharedSecretKey, counter, lastMessage]",{"range":"177","text":"178"},[2472,2485],"[lastMessage, sharedSecretKey]",[3157,3183],"[sharedSecretKey, counter, lastMessage]"]