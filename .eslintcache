[{"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\App.tsx":"1","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Main.tsx":"2","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmPicker.tsx":"3","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\enums.ts":"4","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmEncoder.tsx":"5","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Caeser.tsx":"6","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Playfair.tsx":"7","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Vigenere.tsx":"8","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\helper.ts":"9","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmDecoder.tsx":"10","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Transposition.tsx":"11","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\index.tsx":"12","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Blowfish.tsx":"13","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\blowFishConstants.ts":"14","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\blowfishDiagram.js":"15","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\reportWebVitals.ts":"16","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AES.tsx":"17","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\RSA.tsx":"18","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\DiffieHellmanChat.tsx":"19","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\api.ts":"20","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\PasswordProtectionProgram.tsx":"21","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\passwordProtectionConstants.ts":"22"},{"size":712,"mtime":1614172029324,"results":"23","hashOfConfig":"24"},{"size":1587,"mtime":1616093519560,"results":"25","hashOfConfig":"24"},{"size":1214,"mtime":1611978794131,"results":"26","hashOfConfig":"24"},{"size":298,"mtime":1616091230488,"results":"27","hashOfConfig":"24"},{"size":1124,"mtime":1615061995414,"results":"28","hashOfConfig":"24"},{"size":2865,"mtime":1612110840391,"results":"29","hashOfConfig":"24"},{"size":2531,"mtime":1612201496488,"results":"30","hashOfConfig":"24"},{"size":2531,"mtime":1612200475926,"results":"31","hashOfConfig":"24"},{"size":12415,"mtime":1615061836949,"results":"32","hashOfConfig":"24"},{"size":1022,"mtime":1614174556324,"results":"33","hashOfConfig":"24"},{"size":3273,"mtime":1612204928381,"results":"34","hashOfConfig":"24"},{"size":500,"mtime":1610531780434,"results":"35","hashOfConfig":"24"},{"size":6968,"mtime":1613072855891,"results":"36","hashOfConfig":"24"},{"size":17841,"mtime":1612992732691,"results":"37","hashOfConfig":"24"},{"size":343,"mtime":1613000716996,"results":"38","hashOfConfig":"24"},{"size":425,"mtime":1610531780434,"results":"39","hashOfConfig":"24"},{"size":2342,"mtime":1614172507990,"results":"40","hashOfConfig":"24"},{"size":5495,"mtime":1614178738097,"results":"41","hashOfConfig":"24"},{"size":5906,"mtime":1615102089963,"results":"42","hashOfConfig":"24"},{"size":622,"mtime":1616098392170,"results":"43","hashOfConfig":"24"},{"size":1677,"mtime":1616098636889,"results":"44","hashOfConfig":"24"},{"size":262,"mtime":1616097248076,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1av2frm",{"filePath":"49","messages":"50","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"53"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"53"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\App.tsx",[],["98","99"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Main.tsx",["100"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmPicker.tsx",[],["101","102"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\enums.ts",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmEncoder.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Caeser.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Playfair.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Vigenere.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\helper.ts",["103","104","105"],"import { Result } from \"antd\";\r\nimport { P as defaultP, S, modVal } from \"./blowFishConstants\";\r\nimport { IRSADecode, IRSAEncode } from \"./interfaces\";\r\n\r\nexport const alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\r\nlet P = defaultP.slice();\r\n\r\nexport const caeserEncode = (plainText: string, key: number): string => {\r\n  let text = plainText.toLowerCase().replaceAll(\" \", \"\");\r\n  let encoded = \"\";\r\n  for (let i = 0; i < text.length; ++i) {\r\n    let index = alphabet.indexOf(text.charAt(i));\r\n    index = (index + key) % alphabet.length;\r\n    encoded += alphabet.charAt(index);\r\n  }\r\n  return encoded;\r\n};\r\n\r\nexport const caeserDecode = (encodedText: string, key: number): string => {\r\n  let text = encodedText.toLowerCase().replaceAll(\" \", \"\");\r\n  let decoded = \"\";\r\n  for (let i = 0; i < text.length; ++i) {\r\n    let index = alphabet.indexOf(text.charAt(i));\r\n    index =\r\n      (index - (key % alphabet.length) + alphabet.length) % alphabet.length;\r\n    decoded += alphabet.charAt(index);\r\n  }\r\n  return decoded;\r\n};\r\n\r\nexport const vigenereEncode = (plainText: string, key: string): string => {\r\n  let text = plainText.toLowerCase().replaceAll(\" \", \"\");\r\n  key = key.toLowerCase().replaceAll(\" \", \"\");\r\n  let encoded = \"\";\r\n  for (let i = 0; i < text.length; ++i) {\r\n    let indexText = alphabet.indexOf(text.charAt(i));\r\n    let indexKey = alphabet.indexOf(key.charAt(i % key.length));\r\n    encoded += alphabet.charAt((indexText + indexKey) % alphabet.length);\r\n  }\r\n  return encoded;\r\n};\r\n\r\nexport const vigenereDecode = (encodedText: string, key: string): string => {\r\n  let text = encodedText.toLowerCase().replaceAll(\" \", \"\");\r\n  key = key.toLowerCase().replaceAll(\" \", \"\");\r\n  let decoded = \"\";\r\n  for (let i = 0; i < text.length; ++i) {\r\n    let indexText = alphabet.indexOf(text.charAt(i));\r\n    let indexKey = alphabet.indexOf(key.charAt(i % key.length));\r\n    decoded += alphabet.charAt(\r\n      (indexText - indexKey + alphabet.length) % alphabet.length\r\n    );\r\n  }\r\n  return decoded;\r\n};\r\n\r\nconst generatePlayfairKey = (key: string): string => {\r\n  key = key.replaceAll(\"j\", \"i\");\r\n  let alphabetCopy = alphabet.replaceAll(\"j\", \"i\");\r\n  let result: string = \"\";\r\n\r\n  for (let i = 0; i < key.length; ++i) {\r\n    if (result.indexOf(key.charAt(i)) === -1) {\r\n      result += key.charAt(i);\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < alphabetCopy.length; ++i) {\r\n    if (result.indexOf(alphabetCopy.charAt(i)) === -1) {\r\n      result += alphabetCopy.charAt(i);\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst getRow = (value: number): number => {\r\n  return Math.floor(value / 5);\r\n};\r\n\r\nconst getColumn = (value: number): number => {\r\n  return value % 5;\r\n};\r\n\r\nexport const playfairEncode = (plainText: string, key: string): string => {\r\n  let text = plainText.toLowerCase().replaceAll(\" \", \"\").replaceAll(\"j\", \"i\");\r\n  key = generatePlayfairKey(key.toLowerCase().replaceAll(\" \", \"\"));\r\n\r\n  if (text.length % 2 !== 0) {\r\n    text += \"x\";\r\n  }\r\n\r\n  let encoded = \"\";\r\n\r\n  for (let i = 1; i < text.length; i += 2) {\r\n    let first = text.charAt(i - 1);\r\n    let second = text.charAt(i);\r\n    second = first === second ? \"x\" : second;\r\n\r\n    let firstIndex = key.indexOf(first);\r\n    let secondIndex = key.indexOf(second);\r\n\r\n    if (getRow(firstIndex) === getRow(secondIndex)) {\r\n      firstIndex = getRow(firstIndex) * 5 + ((getColumn(firstIndex) + 1) % 5);\r\n      secondIndex =\r\n        getRow(secondIndex) * 5 + ((getColumn(secondIndex) + 1) % 5);\r\n    } else if (getColumn(firstIndex) === getColumn(secondIndex)) {\r\n      firstIndex = ((getRow(firstIndex) + 1) % 5) * 5 + getColumn(firstIndex);\r\n      secondIndex =\r\n        ((getRow(secondIndex) + 1) % 5) * 5 + getColumn(secondIndex);\r\n    } else {\r\n      const prevFirstCol = getColumn(firstIndex);\r\n      const prevSecondCol = getColumn(secondIndex);\r\n      firstIndex = getRow(firstIndex) * 5 + prevSecondCol;\r\n      secondIndex = getRow(secondIndex) * 5 + prevFirstCol;\r\n    }\r\n\r\n    encoded += key.charAt(firstIndex) + key.charAt(secondIndex);\r\n  }\r\n\r\n  return encoded;\r\n};\r\n\r\nexport const playfairDecode = (encodedText: string, key: string): string => {\r\n  let text = encodedText.toLowerCase().replaceAll(\" \", \"\").replaceAll(\"j\", \"i\");\r\n  key = generatePlayfairKey(key.toLowerCase().replaceAll(\" \", \"\"));\r\n\r\n  let decoded = \"\";\r\n\r\n  for (let i = 1; i < text.length; i += 2) {\r\n    let first = text.charAt(i - 1);\r\n    let second = text.charAt(i);\r\n\r\n    let firstIndex = key.indexOf(first);\r\n    let secondIndex = key.indexOf(second);\r\n\r\n    if (getRow(firstIndex) === getRow(secondIndex)) {\r\n      firstIndex =\r\n        getRow(firstIndex) * 5 + ((getColumn(firstIndex) - 1 + 5) % 5);\r\n      secondIndex =\r\n        getRow(secondIndex) * 5 + ((getColumn(secondIndex) - 1 + 5) % 5);\r\n    } else if (getColumn(firstIndex) === getColumn(secondIndex)) {\r\n      firstIndex =\r\n        ((getRow(firstIndex) - 1 + 5) % 5) * 5 + getColumn(firstIndex);\r\n      secondIndex =\r\n        ((getRow(secondIndex) - 1 + 5) % 5) * 5 + getColumn(secondIndex);\r\n    } else {\r\n      const prevFirstCol = getColumn(firstIndex);\r\n      const prevSecondCol = getColumn(secondIndex);\r\n      firstIndex = getRow(firstIndex) * 5 + prevSecondCol;\r\n      secondIndex = getRow(secondIndex) * 5 + prevFirstCol;\r\n    }\r\n\r\n    decoded += key.charAt(firstIndex) + key.charAt(secondIndex);\r\n  }\r\n  return decoded;\r\n};\r\n\r\nconst swapChars = (text: string, i: number, j: number): string => {\r\n  const p1 = text.substr(0, i);\r\n  const p2 = text.substr(i + 1, j - i - 1);\r\n  const p3 = text.substr(j + 1);\r\n  return p1 + text.charAt(j) + p2 + text.charAt(i) + p3;\r\n};\r\n\r\nexport const transpositionEncode = (plainText: string, key: string): string => {\r\n  let text = plainText.toLowerCase().replaceAll(\" \", \"\");\r\n  key = key.toLowerCase().replaceAll(\" \", \"\");\r\n\r\n  const leftChars =\r\n    text.length % key.length ? key.length - (text.length % key.length) : 0;\r\n  for (let i = 0; i < leftChars; ++i) {\r\n    text += \"x\";\r\n  }\r\n\r\n  const rows = text.length / key.length;\r\n  let encoded = \"\";\r\n  const cols: string[] = new Array(key.length).fill(\"\");\r\n\r\n  for (let i = 0; i < rows; ++i) {\r\n    for (let j = 0; j < key.length; ++j) {\r\n      cols[j] += text.charAt(i * key.length + j);\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < key.length - 1; ++i) {\r\n    for (let j = i + 1; j < key.length; ++j) {\r\n      if (key.charAt(i) > key.charAt(j)) {\r\n        key = swapChars(key, i, j);\r\n        const temp = cols[i];\r\n        cols[i] = cols[j];\r\n        cols[j] = temp;\r\n      }\r\n    }\r\n  }\r\n\r\n  cols.forEach((col) => {\r\n    encoded += col;\r\n  });\r\n\r\n  return encoded;\r\n};\r\n\r\nexport const transpositionDecode = (\r\n  encodedText: string,\r\n  key: string\r\n): string => {\r\n  let text = encodedText.replaceAll(\" \", \"\");\r\n  key = key.toLowerCase().replaceAll(\" \", \"\");\r\n\r\n  const rows = text.length / key.length;\r\n  let decoded = \"\";\r\n  const cols: string[] = new Array(key.length).fill(\"\");\r\n\r\n  for (let i = 0; i < key.length; ++i) {\r\n    for (let j = 0; j < rows; ++j) {\r\n      cols[i] += text.charAt(i * rows + j);\r\n    }\r\n  }\r\n\r\n  let keyCopy = key.slice();\r\n\r\n  for (let i = 0; i < keyCopy.length - 1; ++i) {\r\n    for (let j = i + 1; j < keyCopy.length; ++j) {\r\n      if (keyCopy.charAt(i) > key.charAt(j)) {\r\n        keyCopy = swapChars(keyCopy, i, j);\r\n      }\r\n    }\r\n  }\r\n\r\n  const colsReplaced: string[] = new Array(key.length);\r\n\r\n  for (let i = 0; i < keyCopy.length; ++i) {\r\n    let index = key.indexOf(keyCopy.charAt(i));\r\n    colsReplaced[index] = cols[i];\r\n  }\r\n\r\n  for (let i = 0; i < rows; ++i) {\r\n    for (let j = 0; j < key.length; ++j) {\r\n      decoded += colsReplaced[j].charAt(i);\r\n    }\r\n  }\r\n\r\n  return decoded;\r\n};\r\n\r\nconst hexToBin = (plainText: string): string => {\r\n  let binary = \"\";\r\n  const n = plainText.length;\r\n  for (let i = 0; i < n; ++i) {\r\n    let num = parseInt(plainText.charAt(i) + \"\", 16);\r\n    let binary4B = num.toString(2);\r\n    binary4B = \"0000\" + binary4B;\r\n    binary4B = binary4B.substr(binary4B.length - 4);\r\n    binary += binary4B;\r\n  }\r\n  return binary;\r\n};\r\n\r\nconst binToHex = (plainText: string): string => {\r\n  const num = parseInt(plainText, 2);\r\n  let hex = num.toString(16);\r\n  while (hex.length < plainText.length / 4) {\r\n    hex = \"0\" + hex;\r\n  }\r\n  return hex;\r\n};\r\n\r\nconst xor = (a: string, b: string): string => {\r\n  a = hexToBin(a);\r\n  b = hexToBin(b);\r\n  let ans = \"\";\r\n  for (let i = 0; i < a.length; ++i) {\r\n    ans += String.fromCharCode(\r\n      ((a.charAt(i).charCodeAt(0) - \"0\".charCodeAt(0)) ^\r\n        (b.charAt(i).charCodeAt(0) - \"0\".charCodeAt(0))) +\r\n        \"0\".charCodeAt(0)\r\n    );\r\n  }\r\n  ans = binToHex(ans);\r\n  return ans;\r\n};\r\n\r\nconst addBin = (a: string, b: string): string => {\r\n  let ans = \"\";\r\n  let n1 = parseInt(a, 16);\r\n  let n2 = parseInt(b, 16);\r\n  n1 = (n1 + n2) % modVal;\r\n  ans = n1.toString(16);\r\n  ans = \"00000000\" + ans;\r\n  return ans.substr(ans.length - 8);\r\n};\r\n\r\nconst f = (plainText: string): string => {\r\n  const a: string[] = Array(4);\r\n  let ans = \"\";\r\n  for (let i = 0; i < 8; i += 2) {\r\n    const col = parseInt(hexToBin(plainText.substr(i, 2)), 2);\r\n    a[Math.floor(i / 2)] = S[Math.floor(i / 2)][col];\r\n  }\r\n  ans = addBin(a[0], a[1]);\r\n  ans = xor(ans, a[2]);\r\n  ans = addBin(ans, a[3]);\r\n  return ans;\r\n};\r\n\r\nconst keyGenerate = (key: string) => {\r\n  let j = 0;\r\n  for (let i = 0; i < P.length; ++i) {\r\n    P[i] = xor(P[i], key.substr(j, 8));\r\n\r\n    console.log(`subkey ${i + 1} : ${P[i]}`);\r\n\r\n    j = (j + 8) % key.length;\r\n  }\r\n};\r\n\r\nconst round = (time: number, plainText: string): string => {\r\n  let left = plainText.substr(0, 8);\r\n  let right = plainText.substr(8, 8);\r\n  left = xor(left, P[time]);\r\n\r\n  const fOut = f(left);\r\n\r\n  right = xor(fOut, right);\r\n\r\n  console.log(`round ${time} : ${right + left}`);\r\n\r\n  return right + left;\r\n};\r\n\r\nexport const blowfishEncode = (plainText: string, key: string): string => {\r\n  P = defaultP.slice();\r\n  keyGenerate(key);\r\n  for (let i = 0; i < 16; ++i) {\r\n    plainText = round(i, plainText);\r\n  }\r\n  let right = plainText.substr(0, 8);\r\n  let left = plainText.substr(8, 8);\r\n  right = xor(right, P[16]);\r\n  left = xor(left, P[17]);\r\n  return left + right;\r\n};\r\n\r\nexport const blowfishDecode = (encodedText: string, key: string): string => {\r\n  P = defaultP.slice();\r\n  keyGenerate(key);\r\n  for (let i = 17; i > 1; --i) {\r\n    encodedText = round(i, encodedText);\r\n  }\r\n  let right = encodedText.substr(0, 8);\r\n  let left = encodedText.substr(8, 8);\r\n  right = xor(right, P[1]);\r\n  left = xor(left, P[0]);\r\n  return left + right;\r\n};\r\n\r\nconst gcd = (a: number, b: number): number => {\r\n  while (1) {\r\n    let temp = a % b;\r\n    if (temp === 0) {\r\n      return b;\r\n    }\r\n    a = b;\r\n    b = temp;\r\n  }\r\n  return -1;\r\n};\r\n\r\nconst bigIntPow = (a: bigint, b: number): bigint => {\r\n  let result = BigInt(1);\r\n  for (let i = 0; i < b; ++i) {\r\n    result *= a;\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const rsaEncode = (\r\n  plainText: string,\r\n  p: number,\r\n  q: number\r\n): IRSAEncode => {\r\n  let text = plainText.replaceAll(\" \", \"\");\r\n  const n = p * q;\r\n  let e = 2;\r\n  const phi = (p - 1) * (q - 1);\r\n\r\n  while (e < phi) {\r\n    if (gcd(e, phi) === 1) {\r\n      break;\r\n    } else {\r\n      ++e;\r\n    }\r\n  }\r\n\r\n  const k = 2;\r\n  const d = (1 + k * phi) / e;\r\n\r\n  let result = \"\";\r\n  const encodedNumbers: number[] = [];\r\n\r\n  for (let i = 0; i < plainText.length; ++i) {\r\n    let index = alphabet.indexOf(plainText.charAt(i));\r\n    let c = bigIntPow(BigInt(index), e) % BigInt(n);\r\n    encodedNumbers.push(parseInt(c.toString()));\r\n    result += c + \" \";\r\n  }\r\n\r\n  return {\r\n    encodedText: result,\r\n    encodedNumbers: encodedNumbers,\r\n    n: n,\r\n    e: e,\r\n    phi: phi,\r\n    k: k,\r\n    d: d,\r\n  };\r\n};\r\n\r\nexport const rsaDecode = (\r\n  encodedText: string,\r\n  p: number,\r\n  q: number\r\n): IRSADecode => {\r\n  const encodedNumbers = encodedText\r\n    .trim()\r\n    .split(\" \")\r\n    .map((item) => parseInt(item));\r\n\r\n  const n = p * q;\r\n  let e = 2;\r\n  const phi = (p - 1) * (q - 1);\r\n\r\n  while (e < phi) {\r\n    if (gcd(e, phi) === 1) {\r\n      break;\r\n    } else {\r\n      ++e;\r\n    }\r\n  }\r\n\r\n  const k = 2;\r\n  const d = (1 + k * phi) / e;\r\n\r\n  let result = \"\";\r\n\r\n  encodedNumbers.forEach((item) => {\r\n    let m = bigIntPow(BigInt(item), d) % BigInt(n);\r\n    result += alphabet.charAt(parseInt(m.toString()));\r\n  });\r\n\r\n  return {\r\n    encodedNumbers: encodedNumbers,\r\n    decodedText: result,\r\n    n: n,\r\n    e: e,\r\n    phi: phi,\r\n    k: k,\r\n    d: d,\r\n  };\r\n};\r\n","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AlgorithmDecoder.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Transposition.tsx",[],["106","107"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\index.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\Blowfish.tsx",["108","109","110","111","112"],"import React, { useState, useRef, CSSProperties } from \"react\";\r\nimport { Typography, Input, Button } from \"antd\";\r\nimport * as d3 from \"d3\";\r\nimport { blowfishEncode, blowfishDecode } from \"../utils/helper\";\r\nimport { P } from \"../utils/blowFishConstants\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  marginBottom: \"1rem\",\r\n};\r\n\r\nconst possibleCharacters = \"0123456789abcdef\";\r\n\r\nconst checkForCharacters = (text: string): boolean => {\r\n  for (let i = 0; i < text.length; ++i) {\r\n    if (possibleCharacters.indexOf(text.charAt(i)) === -1) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst drawText = (\r\n  mainGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n  text: string,\r\n  x: number,\r\n  y: number\r\n) => {\r\n  mainGroup\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"x\", x)\r\n    .attr(\"y\", y)\r\n    .attr(\"font-size\", \"1rem\")\r\n    .text(text);\r\n};\r\n\r\nconst drawCircle = (\r\n  mainGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n  x: number,\r\n  y: number\r\n) => {\r\n  mainGroup\r\n    .append(\"circle\")\r\n    .attr(\"cx\", x)\r\n    .attr(\"cy\", y - 3)\r\n    .attr(\"r\", 15)\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"stroke\", \"steelblue\")\r\n    .attr(\"stroke-width\", \"1px\");\r\n};\r\n\r\nconst drawDiagram = (svg: SVGSVGElement) => {\r\n  const container = d3.select(svg);\r\n  container.selectAll(\"g\").remove();\r\n  const height = parseInt(container.attr(\"height\"));\r\n  const width = parseInt(container.attr(\"width\"));\r\n  const verticalSpacing = 60;\r\n  let startY = 20;\r\n\r\n  const mainGroup = container.append(\"g\");\r\n  const plainText = mainGroup\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"x\", width / 2)\r\n    .attr(\"y\", startY)\r\n    .attr(\"font-size\", \"1rem\")\r\n    .text(\"Plain Text Kekulus\");\r\n  console.log(plainText.node()?.getComputedTextLength());\r\n\r\n  startY += verticalSpacing;\r\n\r\n  const left = mainGroup\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"x\", width / 4)\r\n    .attr(\"y\", startY)\r\n    .attr(\"font-size\", \"1rem\")\r\n    .text(\"left part\");\r\n\r\n  const right = mainGroup\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"x\", width - width / 4)\r\n    .attr(\"y\", startY)\r\n    .attr(\"font-size\", \"1rem\")\r\n    .text(\"right part\");\r\n\r\n  startY += verticalSpacing;\r\n\r\n  const colWidth = width / 7;\r\n\r\n  const xLeft = colWidth + colWidth / 2;\r\n  const xCenter = 3 * colWidth + colWidth / 2;\r\n  const xRight = 5 * colWidth + colWidth / 2;\r\n\r\n  const circleRadius = 15;\r\n\r\n  for (let i = 0; i < 16; ++i) {\r\n    let yBegin = startY - 10;\r\n    drawText(mainGroup, \"L\", xLeft, startY);\r\n    drawCircle(mainGroup, xLeft, startY);\r\n\r\n    drawText(mainGroup, \"Pi\", xCenter, startY);\r\n    drawCircle(mainGroup, xCenter, startY);\r\n\r\n    drawText(mainGroup, \"R\", xRight, startY);\r\n    drawCircle(mainGroup, xRight, startY);\r\n\r\n    startY += verticalSpacing;\r\n\r\n    drawText(mainGroup, \"X\", xLeft, startY);\r\n    drawCircle(mainGroup, xLeft, startY);\r\n\r\n    startY += verticalSpacing;\r\n\r\n    drawText(mainGroup, \"L\", xLeft, startY);\r\n    drawCircle(mainGroup, xLeft, startY);\r\n\r\n    drawText(mainGroup, \"F\", xCenter, startY);\r\n    drawCircle(mainGroup, xCenter, startY);\r\n\r\n    drawText(mainGroup, \"X\", xRight, startY);\r\n    drawCircle(mainGroup, xRight, startY);\r\n\r\n    startY += verticalSpacing;\r\n\r\n    drawText(mainGroup, \"R\", xRight, startY);\r\n    drawCircle(mainGroup, xRight, startY);\r\n\r\n    startY += verticalSpacing;\r\n\r\n    drawText(mainGroup, \"L\", xLeft, startY);\r\n    drawCircle(mainGroup, xLeft, startY);\r\n\r\n    drawText(mainGroup, \"R\", xRight, startY);\r\n    drawCircle(mainGroup, xRight, startY);\r\n\r\n    let yEnd = startY;\r\n\r\n    mainGroup\r\n      .append(\"rect\")\r\n      .attr(\"x\", xLeft - 30)\r\n      .attr(\"y\", yBegin - 15)\r\n      .attr(\"width\", xRight - xLeft + 60)\r\n      .attr(\"height\", yEnd - yBegin + 30)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"steelblue\")\r\n      .attr(\"stroke-width\", \"1px\");\r\n\r\n    startY += verticalSpacing;\r\n  }\r\n};\r\n\r\nexport const BlowfishEncode: React.FC = () => {\r\n  const [plainText, setPlainText] = useState<string>(\"\");\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [encodedText, setEncodedText] = useState<string>(\"\");\r\n  const svg = useRef<SVGSVGElement>(null);\r\n\r\n  const handleChangePlainText = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let value = event.target.value.toLowerCase();\r\n    if (value.length > 16 || !checkForCharacters(value)) {\r\n      return;\r\n    }\r\n    setPlainText(value);\r\n  };\r\n\r\n  const encode = () => {\r\n    if (plainText.length === 16 && key.length && key.length % 8 === 0) {\r\n      setEncodedText(blowfishEncode(plainText, key));\r\n      if (svg && svg.current) {\r\n        drawDiagram(svg.current);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text type=\"success\">Encode</Text>\r\n      <Input\r\n        placeholder=\"Input your text\"\r\n        value={plainText}\r\n        onChange={handleChangePlainText}\r\n        style={defaultStyle}\r\n      />\r\n      <Input\r\n        placeholder=\"Input your key\"\r\n        value={key ? key : \"\"}\r\n        onChange={(event) => setKey(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Button type=\"primary\" style={defaultStyle} onClick={() => encode()}>\r\n        Encode\r\n      </Button>\r\n      <div>\r\n        <Text>Encoded Text</Text>\r\n        <Input\r\n          placeholder=\"Your encoded text\"\r\n          value={encodedText}\r\n          contentEditable={false}\r\n        />\r\n      </div>\r\n      <svg ref={svg} height=\"3400\" width=\"400\"></svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const BlowfishDecode: React.FC = () => {\r\n  const [encodedText, setEncodedText] = useState<string>(\"\");\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [decodedText, setDecodedText] = useState<string>(\"\");\r\n\r\n  const handleChangeEncodedText = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let value = event.target.value.toLowerCase();\r\n    if (value.length > 16 || !checkForCharacters(value)) {\r\n      return;\r\n    }\r\n    setEncodedText(value);\r\n  };\r\n\r\n  const decode = () => {\r\n    if (encodedText.length === 16 && key.length && key.length % 8 === 0) {\r\n      setDecodedText(blowfishDecode(encodedText, key));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text type=\"success\">Decode</Text>\r\n      <Input\r\n        placeholder=\"Input your encoded text\"\r\n        value={encodedText}\r\n        onChange={handleChangeEncodedText}\r\n        style={defaultStyle}\r\n      />\r\n      <Input\r\n        placeholder=\"Input your key\"\r\n        value={key ? key : \"\"}\r\n        onChange={(event) => setKey(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Button type=\"primary\" style={defaultStyle} onClick={() => decode()}>\r\n        Decode\r\n      </Button>\r\n      <div>\r\n        <Text>Decoded Text</Text>\r\n        <Input\r\n          placeholder=\"Your decoded text\"\r\n          value={decodedText}\r\n          contentEditable={false}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\blowFishConstants.ts",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\blowfishDiagram.js",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\reportWebVitals.ts",[],["113","114"],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\AES.tsx",["115","116"],"import React, { useState, CSSProperties } from \"react\";\r\nimport { Typography, Input, Button } from \"antd\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  marginBottom: \"1rem\",\r\n};\r\n\r\nexport const AESEncode: React.FC = () => {\r\n  const [plainText, setPlainText] = useState<string>(\"\");\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [encodedText, setEncodedText] = useState<string>(\"\");\r\n\r\n  const encode = () => {\r\n    if (plainText.length && key.length) {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text type=\"success\">Encode</Text>\r\n      <Input\r\n        placeholder=\"Input your text\"\r\n        value={plainText}\r\n        onChange={(event) => setPlainText(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Input\r\n        placeholder=\"Input your key\"\r\n        value={key ? key : \"\"}\r\n        onChange={(event) => setKey(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Button type=\"primary\" style={defaultStyle} onClick={() => encode()}>\r\n        Encode\r\n      </Button>\r\n      <div>\r\n        <Text>Encoded Text</Text>\r\n        <Input\r\n          placeholder=\"Your encoded text\"\r\n          value={encodedText}\r\n          contentEditable={false}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const AESDecode: React.FC = () => {\r\n  const [encodedText, setEncodedText] = useState<string>(\"\");\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [decodedText, setDecodedText] = useState<string>(\"\");\r\n\r\n  const decode = () => {\r\n    if (encodedText.length && key.length) {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text type=\"success\">Decode</Text>\r\n      <Input\r\n        placeholder=\"Input your encoded text\"\r\n        value={encodedText}\r\n        onChange={(event) => setEncodedText(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Input\r\n        placeholder=\"Input your key\"\r\n        value={key ? key : \"\"}\r\n        onChange={(event) => setKey(event.target.value)}\r\n        style={defaultStyle}\r\n      />\r\n      <Button type=\"primary\" style={defaultStyle} onClick={() => decode()}>\r\n        Decode\r\n      </Button>\r\n      <div>\r\n        <Text>Decoded Text</Text>\r\n        <Input\r\n          placeholder=\"Your decoded text\"\r\n          value={decodedText}\r\n          contentEditable={false}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\RSA.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\DiffieHellmanChat.tsx",["117","118","119"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Input, Button } from \"antd\";\r\nimport { diffieHellmanAPI } from \"../utils/api\";\r\nimport { caeserEncode, caeserDecode } from \"../utils/helper\";\r\nimport { Message } from \"../utils/interfaces\";\r\nimport { CaeserDecode } from \"./Caeser\";\r\n\r\nexport const DiffieHellmanChat: React.FC = () => {\r\n  const [prime, setPrime] = useState<number | null>(null);\r\n  const [generator, setGenerator] = useState<number | null>(null);\r\n  const [privateKey, setPrivateKey] = useState<number | null>(null);\r\n  const [interlocutorPublicKey, setInterlocutorPublicKey] = useState<\r\n    number | null\r\n  >(null);\r\n  const [publicKey, setPublicKey] = useState<number | null>(null);\r\n  const [sharedSecretKey, setSharedSecretKey] = useState<number | null>(null);\r\n  const [messageText, setMessageText] = useState<string>(\"\");\r\n  const [lastMessage, setLastMessage] = useState<Message | null>(null);\r\n  const [counter, setCounter] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    if (prime !== null && generator !== null && privateKey !== null) {\r\n      let result = 1;\r\n      for (let i = 0; i < privateKey; ++i) {\r\n        result *= generator;\r\n        result %= prime;\r\n      }\r\n      setPublicKey(result);\r\n    }\r\n  }, [prime, generator, privateKey]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      interlocutorPublicKey !== null &&\r\n      privateKey !== null &&\r\n      prime !== null\r\n    ) {\r\n      let result = 1;\r\n      for (let i = 0; i < privateKey; ++i) {\r\n        result *= interlocutorPublicKey;\r\n        result %= prime;\r\n      }\r\n      setSharedSecretKey(result);\r\n    }\r\n  }, [interlocutorPublicKey, privateKey, prime]);\r\n\r\n  const sendMessage = () => {\r\n    if (sharedSecretKey !== null && messageText) {\r\n      diffieHellmanAPI\r\n        .sendMessage({\r\n          sentTime: Date.now(),\r\n          content: caeserEncode(messageText, sharedSecretKey),\r\n        })\r\n        .then((response) => {\r\n          if (response.status === 200) {\r\n            setMessageText(\"\");\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (lastMessage && sharedSecretKey) {\r\n      const item = document.createElement(\"div\");\r\n      item.innerHTML = `<p><strong>${new Date(\r\n        lastMessage.sentTime\r\n      ).toLocaleTimeString()}</strong></p><p>${caeserDecode(\r\n        lastMessage.content,\r\n        sharedSecretKey\r\n      )}</p><hr/>`;\r\n      document.getElementById(\"chat\")?.appendChild(item);\r\n      console.log(\"chat Item added\");\r\n    }\r\n  }, [lastMessage]);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      if (sharedSecretKey !== null) {\r\n        diffieHellmanAPI.getLastMessage().then((response) => {\r\n          if (response.status === 200) {\r\n            const last: Message = response.data;\r\n            if (lastMessage === null) {\r\n              console.log(\"1\");\r\n              setLastMessage(last);\r\n            }\r\n            if (\r\n              lastMessage !== null &&\r\n              lastMessage.sentTime !== last.sentTime\r\n            ) {\r\n              console.log(\"2\");\r\n              setLastMessage(last);\r\n            }\r\n          }\r\n        });\r\n      }\r\n      setCounter(counter + 1);\r\n    }, 2000);\r\n  }, [sharedSecretKey, counter]);\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={[16, 16]}>\r\n        <Col span={6}>\r\n          <p>Prime P</p>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Input Prime P\"\r\n            value={prime ? prime : \"\"}\r\n            onChange={(event) => setPrime(parseInt(event.target.value))}\r\n          />\r\n        </Col>\r\n        <Col span={6}>\r\n          <p>Generator</p>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Input Generator\"\r\n            value={generator ? generator : \"\"}\r\n            onChange={(event) => setGenerator(parseInt(event.target.value))}\r\n          />\r\n        </Col>\r\n        <Col span={6}>\r\n          <p>Private Key</p>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Input Private Key\"\r\n            value={privateKey ? privateKey : \"\"}\r\n            onChange={(event) => setPrivateKey(parseInt(event.target.value))}\r\n          />\r\n        </Col>\r\n        <Col span={6}>\r\n          <p>Interlocutor Public Key</p>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Input Interlocutor Public Key\"\r\n            value={interlocutorPublicKey ? interlocutorPublicKey : \"\"}\r\n            onChange={(event) =>\r\n              setInterlocutorPublicKey(parseInt(event.target.value))\r\n            }\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[16, 16]}>\r\n        <Col span={6}>\r\n          <p>Your Public Key</p>\r\n          <Input\r\n            contentEditable={false}\r\n            type=\"number\"\r\n            value={publicKey ? publicKey : \"\"}\r\n          />\r\n        </Col>\r\n        <Col span={6}>\r\n          <p>Shared Secret Key</p>\r\n          <Input\r\n            contentEditable={false}\r\n            type=\"number\"\r\n            value={sharedSecretKey ? sharedSecretKey : \"\"}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginBottom: \"1rem\" }}>\r\n        <Col span={24}>\r\n          <div\r\n            id=\"chat\"\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"20rem\",\r\n              backgroundColor: \"white\",\r\n              overflowY: \"scroll\",\r\n            }}\r\n          ></div>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[16, 16]}>\r\n        <Col span={20}>\r\n          <Input\r\n            placeholder=\"Input your message\"\r\n            value={messageText}\r\n            onChange={(event) => setMessageText(event.target.value)}\r\n          />\r\n        </Col>\r\n        <Col span={4}>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            disabled={sharedSecretKey === null}\r\n            onClick={sendMessage}\r\n          >\r\n            Send\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\api.ts",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\components\\PasswordProtectionProgram.tsx",[],"C:\\Users\\turar\\Documents\\Projects\\information-security-labs\\lab1\\src\\utils\\passwordProtectionConstants.ts",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":2,"message":"125","line":26,"column":14,"nodeType":"126","endLine":26,"endColumn":39},{"ruleId":"120","replacedBy":"127"},{"ruleId":"122","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":10,"nodeType":"131","messageId":"132","endLine":1,"endColumn":16},{"ruleId":"133","severity":1,"message":"134","line":367,"column":3,"nodeType":"135","messageId":"136","endLine":367,"endColumn":13},{"ruleId":"129","severity":1,"message":"137","line":383,"column":7,"nodeType":"131","messageId":"132","endLine":383,"endColumn":11},{"ruleId":"120","replacedBy":"138"},{"ruleId":"122","replacedBy":"139"},{"ruleId":"129","severity":1,"message":"140","line":5,"column":10,"nodeType":"131","messageId":"132","endLine":5,"endColumn":11},{"ruleId":"129","severity":1,"message":"141","line":57,"column":9,"nodeType":"131","messageId":"132","endLine":57,"endColumn":15},{"ruleId":"129","severity":1,"message":"142","line":74,"column":9,"nodeType":"131","messageId":"132","endLine":74,"endColumn":13},{"ruleId":"129","severity":1,"message":"143","line":82,"column":9,"nodeType":"131","messageId":"132","endLine":82,"endColumn":14},{"ruleId":"129","severity":1,"message":"144","line":98,"column":9,"nodeType":"131","messageId":"132","endLine":98,"endColumn":21},{"ruleId":"120","replacedBy":"145"},{"ruleId":"122","replacedBy":"146"},{"ruleId":"129","severity":1,"message":"147","line":13,"column":23,"nodeType":"131","messageId":"132","endLine":13,"endColumn":37},{"ruleId":"129","severity":1,"message":"148","line":53,"column":23,"nodeType":"131","messageId":"132","endLine":53,"endColumn":37},{"ruleId":"129","severity":1,"message":"149","line":6,"column":10,"nodeType":"131","messageId":"132","endLine":6,"endColumn":22},{"ruleId":"150","severity":1,"message":"151","line":74,"column":6,"nodeType":"152","endLine":74,"endColumn":19,"suggestions":"153"},{"ruleId":"150","severity":1,"message":"154","line":98,"column":6,"nodeType":"152","endLine":98,"endColumn":32,"suggestions":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"react/jsx-no-undef","'PasswordProtectionProgram' is not defined.","JSXIdentifier",["156"],["157"],"@typescript-eslint/no-unused-vars","'Result' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'text' is assigned a value but never used.",["156"],["157"],"'P' is defined but never used.","'height' is assigned a value but never used.","'left' is assigned a value but never used.","'right' is assigned a value but never used.","'circleRadius' is assigned a value but never used.",["156"],["157"],"'setEncodedText' is assigned a value but never used.","'setDecodedText' is assigned a value but never used.","'CaeserDecode' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sharedSecretKey'. Either include it or remove the dependency array.","ArrayExpression",["158"],"React Hook useEffect has a missing dependency: 'lastMessage'. Either include it or remove the dependency array.",["159"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [lastMessage, sharedSecretKey]",{"range":"164","text":"165"},"Update the dependencies array to be: [sharedSecretKey, counter, lastMessage]",{"range":"166","text":"167"},[2505,2518],"[lastMessage, sharedSecretKey]",[3190,3216],"[sharedSecretKey, counter, lastMessage]"]